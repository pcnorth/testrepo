{
  "swagger": "2.0",
  "info": {
    "title": "PublicAssets API",
    "description": "API for public asset and event management.",
    "version": "2.0",
    "contact": {
      "name": "DataTrails",
      "url": "https://www.datatrails.ai"
    }
  },
  "tags": [
    {
      "name": "PublicAssets",
      "description": "Retrieve Public Attestations and public Asset and Event records"
    }
  ],
  "basePath": "/archivist/v2/publicassets",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/archivist/v2/publicassets/{asset_uuid}/events/{uuid}": {
      "get": {
        "summary": "Retrieves Archivist event for public asset",
        "description": "Retrieves a specific Archivist event for a public asset",
        "operationId": "PublicAssets_GetPublicEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2EventResponse"
            }
          },
          "404": {
            "description": "Returned when the event does not exist."
          }
        },
        "parameters": [
          {
            "name": "asset_uuid",
            "description": "Specify the Asset UUID where `publicassets/{asset_uuid}/events/{uuid}` is the Event Identity e.g. `add30235-1424-4fda-840a-d5ef82c4c96f` from Identity `publicassets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "description": "Specify the Event UUID where `publicassets/{asset_uuid}/events/{uuid}` is the Event Identity e.g. `11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000` from Identity `publicassets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PublicAssets"
        ]
      }
    },
    "/archivist/v2/publicassets/{uuid}": {
      "get": {
        "summary": "Retrieves a specific public Archivist asset",
        "description": "Retrieves a specific public Archivist asset",
        "operationId": "PublicAssets_GetPublicAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2AssetResponse"
            }
          },
          "404": {
            "description": "Returned when the no asset with the provided id can be found."
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "Specify the Asset UUID where `publicassets/{uuid}` is the Asset Identity e.g. `add30235-1424-4fda-840a-d5ef82c4c96f` from Identity `publicassets/add30235-1424-4fda-840a-d5ef82c4c96f`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "at_time",
            "description": "Specify time in the past to show asset data as it was at time specified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "PublicAssets"
        ]
      }
    },
    "/archivist/v2/publicassets/{uuid}/events": {
      "get": {
        "summary": "List Archivist events for a public asset",
        "description": "Lists Archivist events for a public asset",
        "operationId": "PublicAssets_ListPublicEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListEventsResponse"
            }
          },
          "206": {
            "description": "The number of events exceeds the servers limit. The approximate number of matching results is provided by the x-total-count header, the exact limit is available in the content-range header. The value format is 'items 0-LIMIT/TOTAL'.  Note that x-total-count is always present for 200 and 206 responses. It is the servers best available approximation. Similarly, in any result set, you may get a few more than LIMIT items."
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "Specify the Asset UUID where `publicassets/{uuid}` is the Asset Identity e.g. `add30235-1424-4fda-840a-d5ef82c4c96f` from Identity `publicassets/add30235-1424-4fda-840a-d5ef82c4c96f`.  Use `-` to list Events for all Assets",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Maximum results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The next_page_token returned from a previous list request if any.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "description": "Specify the sort order for the results.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DEFAULT",
              "SIMPLEHASHV1",
              "SIMPLEHASHV2"
            ],
            "default": "DEFAULT"
          },
          {
            "name": "confirmation_status",
            "description": "indicates if the asset has been succesfully committed to the blockchain\n\n - PENDING: not yet committed\n - CONFIRMED: committed. forestrie: \"You can easily prove it changed\"\n - FAILED: permanent failure\n - STORED: Regarding the new statuses for forestrie,  See\nhttps://github.com/datatrails/epic-8120-scalable-proof-mechanisms/blob/main/event-trust-levels.md\n\nforestrie, \"its in the db\"\n - COMMITTED: forestrie, \"you can know if its changed\"\n - UNEQUIVOCAL: We re-use the constant for CONFIRMED (above)\n\nforestrie, \"You easily prove it was publicly available to all\"",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CONFIRMATION_STATUS_UNSPECIFIED",
              "PENDING",
              "CONFIRMED",
              "FAILED",
              "STORED",
              "COMMITTED",
              "UNEQUIVOCAL"
            ],
            "default": "CONFIRMATION_STATUS_UNSPECIFIED"
          },
          {
            "name": "principal_declared.issuer",
            "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_declared.subject",
            "description": "unique identifier of the principal (within issuer context)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_declared.display_name",
            "description": "The displayable name of the end-user.  The name claim is prefered, followed by email claims, then a composite of  given_name, middle_name, family_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_declared.email",
            "description": "The email for the end-user if available. If email_verified is  available it is preferd. Empty if neither email_verified or email  are provided by the IdP",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_accepted.issuer",
            "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_accepted.subject",
            "description": "unique identifier of the principal (within issuer context)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_accepted.display_name",
            "description": "The displayable name of the end-user.  The name claim is prefered, followed by email claims, then a composite of  given_name, middle_name, family_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "principal_accepted.email",
            "description": "The email for the end-user if available. If email_verified is  available it is preferd. Empty if neither email_verified or email  are provided by the IdP",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp_accepted_since",
            "description": "Filtering\n\nOnly list events when timestamp_accepted is greater",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestamp_accepted_before",
            "description": "Only list events when timestamp_accepted is lesser",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestamp_committed_since",
            "description": "Only list events when timestamp_committed is greater",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestamp_committed_before",
            "description": "Only list events when timestamp_committed is lesser",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestamp_declared_since",
            "description": "Only list events when timestamp_declared is greater",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestamp_declared_before",
            "description": "Only list events when timestamp_declared is lesser",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "operation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "behaviour",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "event_attributes[string]",
            "description": "user defined event_attributes key max_length: 1024 value max_length: 4096\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asset_attributes[string]",
            "description": "user defined asset_attributes key max_length: 1024 value max_length: 4096\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asset.attributes[string]",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "proof_mechanism",
            "description": "mechanism for evidential proof for Events on this Asset\n\nspecify the mechanism used to provide evidential proof for Events on this Asset",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROOF_MECHANISM_UNSPECIFIED",
              "RESERVED1",
              "SIMPLE_HASH",
              "MERKLE_LOG"
            ],
            "default": "PROOF_MECHANISM_UNSPECIFIED"
          }
        ],
        "tags": [
          "PublicAssets"
        ]
      }
    }
  },
  "definitions": {
    "ListEventsRequestAssetQuery": {
      "type": "object",
      "properties": {
        "attributes[string]": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "key value mapping of asset attributes"
        }
      }
    },
    "v1Filter": {
      "type": "object",
      "example": {
        "or": [
          "group=maintainers",
          "group=supervisors"
        ]
      },
      "properties": {
        "or": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The filter list"
        }
      },
      "description": "Filter"
    },
    "v2AssetResponse": {
      "type": "object",
      "example": {
        "identity": "publicassets/add30235-1424-4fda-840a-d5ef82c4c96f",
        "behaviours": [
          "RecordEvidence"
        ],
        "attributes": {
          "arc_firmware_version": "3.2.1",
          "arc_attachments": [
            {
              "arc_attachment_identity": "blobs/1754b920-cf20-4d7e-9d36-9ed7d479744d",
              "arc_hash_value": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
              "arc_display_name": "Picture from yesterday",
              "arc_hash_alg": "sha256"
            }
          ],
          "arc_home_location_identity": "locations/42054f10-9952-4c10-a082-9fd0d10295ae"
        },
        "confirmation_status": "PENDING",
        "tracked": "TRACKED",
        "owner": "0x601f5A7D3e6dcB55e87bf2F17bC8A27AaCD3511",
        "at_time": "2019-11-27T14:44:19Z",
        "proof_mechanism": "SIMPLE_HASH",
        "public": false,
        "tenant_identity": "tenant/8e0b600c-8234-43e4-860c-e95bdcd695a9"
      },
      "properties": {
        "identity": {
          "type": "string",
          "description": "relative resource address `publicassets/{UUID}`",
          "title": "asset identity",
          "readOnly": true
        },
        "behaviours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of behaviours enabled for this asset",
          "title": "list of enabled behaviours"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2Attribute"
          },
          "description": "key value mapping of asset properties",
          "title": "all the publicassets attributes"
        },
        "confirmation_status": {
          "type": "string",
          "$ref": "#/definitions/v2ConfirmationStatus",
          "description": "indicates if the asset has been succesfully committed to the blockchain",
          "title": "indicated if asset has been committed to the blockchain, possible values are CONFIRMED for committed, PENDING for not yet committed or FAILED for permanent failure",
          "readOnly": true
        },
        "tracked": {
          "type": "string",
          "$ref": "#/definitions/v2TrackedStatus",
          "description": "indicates whether asset is still being tracked in the system",
          "title": "indicates if asset is being tracked in the system TRACKED or NOT_TRACKED",
          "readOnly": true
        },
        "access_policy": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2Attribute"
          },
          "description": "key value mapping of behaviour to private for keys",
          "title": "describes the access policy for this asset"
        },
        "owner": {
          "type": "string",
          "description": "wallet address of the asset owner",
          "title": "wallet address for the owner of this asset",
          "readOnly": true
        },
        "at_time": {
          "type": "string",
          "format": "date-time",
          "description": "indicates time the asset data is from",
          "readOnly": true
        },
        "proof_mechanism": {
          "type": "string",
          "$ref": "#/definitions/v2ProofMechanism",
          "description": "the mechanism used to provide evidential proof"
        },
        "chain_id": {
          "type": "string",
          "description": "chain id of the blockchain associated with this asset",
          "readOnly": true
        },
        "public": {
          "type": "boolean",
          "description": "Public asset"
        },
        "tenant_identity": {
          "type": "string",
          "description": "Identity of the tenant the that created this asset",
          "maxLength": 1024
        }
      },
      "description": "This describes an Asset."
    },
    "v2Attribute": {
      "type": "object",
      "properties": {
        "str_val": {
          "type": "string"
        },
        "dict_val": {
          "$ref": "#/definitions/v2DictAttr"
        },
        "list_val": {
          "$ref": "#/definitions/v2ListAttr"
        }
      }
    },
    "v2ConfirmationStatus": {
      "type": "string",
      "enum": [
        "CONFIRMATION_STATUS_UNSPECIFIED",
        "PENDING",
        "CONFIRMED",
        "FAILED",
        "STORED",
        "COMMITTED",
        "UNEQUIVOCAL"
      ],
      "default": "CONFIRMATION_STATUS_UNSPECIFIED",
      "description": "forestrie, \"its in the db\"\n - COMMITTED: forestrie, \"you can know if its changed\"\n - UNEQUIVOCAL: We re-use the constant for CONFIRMED (above)\n\nforestrie, \"You easily prove it was publicly available to all\"",
      "title": "- PENDING: not yet committed\n - CONFIRMED: committed. forestrie: \"You can easily prove it changed\"\n - FAILED: permanent failure\n - STORED: Regarding the new statuses for forestrie,  See\nhttps://github.com/datatrails/epic-8120-scalable-proof-mechanisms/blob/main/event-trust-levels.md"
    },
    "v2DictAttr": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v2EventResponse": {
      "type": "object",
      "example": {
        "identity": "publicassets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
        "asset_identity": "publicassets/add30235-1424-4fda-840a-d5ef82c4c96f",
        "operation": "Record",
        "behaviour": "RecordEvidence",
        "event_attributes": {
          "arc_attachments": [
            {
              "arc_attachment_identity": "blobs/1754b920-cf20-4d7e-9d36-9ed7d479744d",
              "arc_hash_value": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
              "arc_display_name": "Picture from yesterday",
              "arc_hash_alg": "sha256"
            }
          ]
        },
        "asset_attributes": {
          "arc_firmware_version": "3.2.1",
          "arc_home_location_identity": "locations/42054f10-9952-4c10-a082-9fd0d10295ae"
        },
        "timestamp_accepted": "2019-11-27T14:44:19Z",
        "timestamp_declared": "2019-11-27T14:44:19Z",
        "timestamp_committed": "2019-11-27T14:44:19Z",
        "principal_declared": {
          "issuer": "job.idp.server/1234",
          "subject": "bob@job"
        },
        "principal_accepted": {
          "issuer": "job.idp.server/1234",
          "subject": "bob@job"
        },
        "confirmation_status": "CONFIRMED",
        "block_number": 12,
        "transaction_index": 5,
        "transaction_id": "0x07569",
        "tenant_identity": "tenant/8e0b600c-8234-43e4-860c-e95bdcd695a9"
      },
      "properties": {
        "identity": {
          "type": "string",
          "description": "identity of a event resource",
          "title": "Relative Resource Name for the operation event",
          "readOnly": true
        },
        "asset_identity": {
          "type": "string",
          "description": "identity of a related asset resource `publicassets/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000`",
          "title": "relative resource name for associated asset ( asset the operation is performed on  - has to have specific behaviour enabled)",
          "readOnly": true
        },
        "event_attributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2Attribute"
          },
          "description": "key value mapping of event attributes"
        },
        "asset_attributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2Attribute"
          },
          "description": "key value mapping of asset attributes"
        },
        "operation": {
          "type": "string",
          "description": "The operation represented by the event. `Record`",
          "title": "name of operation on this behviour",
          "readOnly": true,
          "maxLength": 4096
        },
        "behaviour": {
          "type": "string",
          "description": "The behaviour used to create event. `RecordEvidence`",
          "title": "name of this behaviour",
          "readOnly": true,
          "maxLength": 4096
        },
        "timestamp_declared": {
          "type": "string",
          "format": "date-time",
          "description": "time of event as declared by the user",
          "title": "timestamp when operation was actually performed - if not provided will be set to timestamp_accepted",
          "readOnly": true
        },
        "timestamp_accepted": {
          "type": "string",
          "format": "date-time",
          "description": "time of event as recorded by the server",
          "title": "timestamp when system received operation request",
          "readOnly": true
        },
        "timestamp_committed": {
          "type": "string",
          "format": "date-time",
          "description": "time of event as recorded in verifiable storage",
          "title": "timestamp for when the event was committed to a verifiable log",
          "readOnly": true
        },
        "principal_declared": {
          "type": "object",
          "$ref": "#/definitions/v2Principal",
          "description": "principal provided by the user",
          "title": "principal information associated with event - if not provided will be set to principal_accepted",
          "readOnly": true
        },
        "principal_accepted": {
          "type": "object",
          "$ref": "#/definitions/v2Principal",
          "description": "principal recorded by the server",
          "title": "principal logged into the system that performed the operation",
          "readOnly": true
        },
        "confirmation_status": {
          "type": "string",
          "$ref": "#/definitions/v2ConfirmationStatus",
          "description": "indicates if the event has been succesfully committed to the blockchain",
          "title": "indicated if operation has been committed to the blockchain",
          "readOnly": true
        },
        "transaction_id": {
          "type": "string",
          "description": "hash of the transaction as a hex string `0x11bf5b37e0b842e08dcfdc8c4aefc000`",
          "title": "hash of transaction committing this operation on blockchain",
          "maxLength": 4096
        },
        "block_number": {
          "type": "string",
          "format": "uint64",
          "description": "number of block event was commited on",
          "title": "block number of committing transaction",
          "readOnly": true
        },
        "transaction_index": {
          "type": "string",
          "format": "uint64",
          "description": "index of event within commited block",
          "title": "transaction index of committing transaction",
          "readOnly": true
        },
        "from": {
          "type": "string",
          "description": "wallet address for the creator of this event",
          "title": "wallet address for the creator of this event",
          "readOnly": true
        },
        "tenant_identity": {
          "type": "string",
          "description": "Identity of the tenant the that created this event",
          "maxLength": 1024
        },
        "merklelog_entry": {
          "type": "object",
          "$ref": "#/definitions/v2MerkleLogEntry",
          "description": "verifiable merkle mmr log entry details",
          "title": "proof details for proof_mechanism MERKLE_LOG"
        }
      },
      "description": "This describes an Event."
    },
    "v2ListAttr": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2DictAttr"
          }
        }
      }
    },
    "v2ListEventsRequestOrderBy": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "SIMPLEHASHV1",
        "SIMPLEHASHV2"
      ],
      "default": "DEFAULT",
      "title": "Supported sort orders"
    },
    "v2ListEventsResponse": {
      "type": "object",
      "example": {
        "events": [
          {
            "identity": "publicassets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "asset_identity": "publicassets/add30235-1424-4fda-840a-d5ef82c4c96f",
            "operation": "Record",
            "behaviour": "RecordEvidence",
            "event_attributes": {
              "arc_attachments": [
                {
                  "arc_attachment_identity": "blobs/1754b920-cf20-4d7e-9d36-9ed7d479744d",
                  "arc_hash_value": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
                  "arc_display_name": "Picture from yesterday",
                  "arc_hash_alg": "sha256"
                }
              ]
            },
            "asset_attributes": {
              "arc_firmware_version": "3.2.1",
              "arc_home_location_identity": "locations/42054f10-9952-4c10-a082-9fd0d10295ae"
            },
            "timestamp_accepted": "2019-11-27T14:44:19Z",
            "timestamp_declared": "2019-11-27T14:44:19Z",
            "timestamp_committed": "2019-11-27T14:44:19Z",
            "principal_declared": {
              "issuer": "job.idp.server/1234",
              "subject": "bob@job"
            },
            "principal_accepted": {
              "issuer": "job.idp.server/1234",
              "subject": "bob@job"
            },
            "confirmation_status": "CONFIRMED",
            "block_number": 12,
            "transaction_index": 5,
            "transaction_id": "0x07569",
            "tenant_identity": "tenant/8e0b600c-8234-43e4-860c-e95bdcd695a9"
          },
          {
            "identity": "publicassets/bf330235-1424-4fda-840a-d5ef82c4c96f/events/23c06c48-e0b8-42e0-8dcf-dc8c4fdad123",
            "asset_identity": "publicassets/bf330235-1424-4fda-840a-d5ef82c4c96f",
            "operation": "Record",
            "behaviour": "RecordEvidence",
            "event_attributes": {
              "arc_attachments": [
                {
                  "arc_attachment_identity": "blobs/1754b920-cf20-4d7e-9d36-9ed7d479744d",
                  "arc_hash_value": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
                  "arc_display_name": "Picture",
                  "arc_hash_alg": "sha256"
                }
              ]
            },
            "asset_attributes": {
              "arc_firmware_version": "3.2.1",
              "arc_home_location_identity": "locations/42054f10-9952-4c10-a082-9fd0d10295ae"
            },
            "timestamp_accepted": "2019-07-27T14:44:19Z",
            "timestamp_declared": "2019-07-27T14:44:19Z",
            "timestamp_committed": "2019-07-27T14:44:19Z",
            "principal_declared": {
              "issuer": "job.idp.server/1234",
              "subject": "bob@job"
            },
            "principal_accepted": {
              "issuer": "job.idp.server/1234",
              "subject": "bob@job"
            },
            "confirmation_status": "CONFIRMED",
            "block_number": 13,
            "transaction_index": 6,
            "transaction_id": "0x12569",
            "tenant_identity": "tenant/8e0b600c-8234-43e4-860c-e95bdcd695a9"
          }
        ],
        "next_page_token": "abcd"
      },
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2EventResponse"
          }
        },
        "next_page_token": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are none."
        }
      },
      "description": "A list of event records returned data identical to `EventRecord`"
    },
    "v2MerkleLogCommit": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "The mmr index"
        },
        "idtimestamp": {
          "type": "string",
          "description": "time ordered and strictly unique per tenant. system wide unique with very\nreasonable operational assumptions. prefixed with time epoch if len > 8\nbytes (after conversion back from hex)."
        }
      },
      "description": "MerkeLogCommit provides the log entry details for a single mmr leaf."
    },
    "v2MerkleLogConfirm": {
      "type": "object",
      "properties": {
        "mmr_size": {
          "type": "string",
          "format": "uint64",
          "title": "The following correspond to mmrblobs.MMRState"
        },
        "root": {
          "type": "string",
          "format": "byte"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "The regular unix time the root was signed"
        },
        "idtimestamp": {
          "type": "string",
          "title": "The idtimestamp of the last leaf under mmr_size. prefixed with time epoch if len > 8 bytes (after conversion back from hex)"
        },
        "signed_tree_head": {
          "type": "string",
          "format": "byte",
          "description": "The signed merkle tree head state at mmr_size. Contains COSE Sign1 formatted message."
        }
      }
    },
    "v2MerkleLogEntry": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/v2MerkleLogCommit",
          "title": "Event trust level COMMITTED details"
        },
        "confirm": {
          "$ref": "#/definitions/v2MerkleLogConfirm",
          "title": "Event trust level CONFIRMED details"
        },
        "unequivocal": {
          "$ref": "#/definitions/v2MerkleLogUnequivocal",
          "title": "Event trust level UNEQUIVOCAL details"
        }
      },
      "title": "The details stored in the SaaS db for a proof mech MERKLE_LOG commitment"
    },
    "v2MerkleLogUnequivocal": {
      "type": "object"
    },
    "v2Principal": {
      "type": "object",
      "example": {
        "issuer": "job.idp.server/1234",
        "subject": "bob@job"
      },
      "properties": {
        "issuer": {
          "type": "string",
          "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
          "maxLength": 1024
        },
        "subject": {
          "type": "string",
          "description": "unique identifier of the principal (within issuer context)",
          "maxLength": 1024
        },
        "display_name": {
          "type": "string",
          "description": "The displayable name of the end-user.  The name claim is prefered, followed by email claims, then a composite of  given_name, middle_name, family_name",
          "maxLength": 1024
        },
        "email": {
          "type": "string",
          "description": "The email for the end-user if available. If email_verified is  available it is preferd. Empty if neither email_verified or email  are provided by the IdP",
          "maxLength": 1024
        }
      },
      "description": "The principal description assured by the configured Identity  Provider. All values are according to OIDC id token claims and  standard claims.  See https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
    },
    "v2ProofMechanism": {
      "type": "string",
      "enum": [
        "PROOF_MECHANISM_UNSPECIFIED",
        "RESERVED1",
        "SIMPLE_HASH",
        "MERKLE_LOG"
      ],
      "default": "PROOF_MECHANISM_UNSPECIFIED"
    },
    "v2TrackedStatus": {
      "type": "string",
      "enum": [
        "TRACKED_STATUS_UNSPECIFIED",
        "TRACKED",
        "NOT_TRACKED",
        "ANY"
      ],
      "default": "TRACKED_STATUS_UNSPECIFIED"
    }
  }
}
