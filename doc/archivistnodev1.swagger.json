{
  "swagger": "2.0",
  "info": {
    "title": "ArchivistNode API",
    "description": "API to manage an archivist node.",
    "version": "1.0",
    "contact": {
      "name": "DataTrails",
      "url": "https://www.datatrails.ai"
    }
  },
  "tags": [
    {
      "name": "ArchivistNode",
      "description": "Query the ArchivistNode you're connected to"
    }
  ],
  "basePath": "/archivist/v1/archivistnode",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/archivist/v1/archivistnode": {
      "get": {
        "summary": "Get information about an archivist node",
        "description": "Returns the identified archivist node",
        "operationId": "ArchivistNode_GetArchivistNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ArchivistNodes"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system."
          },
          "403": {
            "description": "Returned when the user is not authorized to read the archivist node's information"
          },
          "404": {
            "description": "Returned when the identified archivist node does not exist"
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests."
          }
        },
        "tags": [
          "ArchivistNode"
        ]
      }
    },
    "/archivist/v1/archivistnode/block": {
      "get": {
        "summary": "Get a block given a block hash or block number.",
        "description": "Get a block given a block hash or block number",
        "operationId": "ArchivistNode_GetBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBlockResponse"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated to the system."
          },
          "403": {
            "description": "Returned when the user is not authorized to view the block."
          },
          "404": {
            "description": "Returned when the asset with the id does not exist. or the event with the id does not exist"
          },
          "429": {
            "description": "Returned when a user exceeds their subscription's rate limit for requests."
          }
        },
        "parameters": [
          {
            "name": "hash",
            "description": "the block hash e.g 0x5c6726d7570046c6c4b20e97de1486877f293ba1e4d3b64c13b671354c2f8266",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "description": "the block number as a hexidecimal number e.g. 0x1a95f, or `latest` for the latest block",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "public",
            "description": "get the privateStateRoot for the public tenant",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ArchivistNode"
        ]
      }
    }
  },
  "definitions": {
    "v1ArchivistNodes": {
      "type": "object",
      "example": {
        "identity": "quorum-0",
        "blockchain_nodes": [
          {
            "validator_pubkey": {
              "kty": "EC",
              "crv": "P-256K",
              "x": "VBKHictTWJC-3sqknXCb8MI4IxTc3c_My7lnem2C74E=",
              "y": "ItNeb5d-6vEHkvtUOcDYrEADxsZXeOCJm18pQWntenE=",
              "d": ""
            },
            "block_height": "38773",
            "connection_status": "REACHABLE",
            "syncing": null,
            "genesis_hash": "0x1b526bd9c7f9bf7c43ba91ad07e5530eb7ceedf390396f9fbfeb68722e097e95",
            "state_root": "0x9606fc44a382938703678ac90581ab1260c9efd20ea8c7f90c87852bc982f3a7",
            "timestamp_committed": "2019-01-01T12:00:27Z",
            "timestamp_created": "2019-01-01T12:00:27Z",
            "peers": [
              {
                "validator_pubkey": {
                  "kty": "EC",
                  "crv": "P-256K",
                  "x": "o0uZ8ix5DE42srPCw1o22wYibkHGkvyCuLVqwcVAxb0=",
                  "y": "W43sUjWg-ociR2x3CcAlWeOqc6oDkYui1JLup1q-ojU=",
                  "d": ""
                },
                "connection_status": "REACHABLE"
              },
              {
                "validator_pubkey": {
                  "kty": "EC",
                  "crv": "P-256K",
                  "x": "5HcU1PJgTe0LGyGxKFrIPFZWdTbxPySfi6bKxdQeO8A=",
                  "y": "dEpMURyTwEGzpgIgLdm4Csl1BgF6H39tb1Kf8wLLhVI=",
                  "d": ""
                },
                "connection_status": "REACHABLE"
              }
            ]
          }
        ]
      },
      "properties": {
        "identity": {
          "type": "string",
          "description": "The identity of the archivistnode blockchain",
          "readOnly": true
        },
        "blockchain_nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockchainNode",
            "readOnly": true
          },
          "description": "Status information for the blockchain nodes belonging to this  archivist node. Each blockchain node further contains information  about any connected peers. Note that the peer lists for each blockchain  node will often overlap"
        }
      },
      "description": "Describes the status of the archivist node."
    },
    "v1BlockchainNode": {
      "type": "object",
      "properties": {
        "validator_pubkey": {
          "$ref": "#/definitions/v1JSONWebKey",
          "description": "Blockchain node Public key, used to validate transactions. A  Secp256k1 public key. Formatted as  a JWK accodring to RFC 7517 (JWK), RFC 7518 (JWA) and  draft-ietf-cose-webauthn-algorithms-00. Note in particular,  that x, y are the base64url encoding of the uncompressed key.",
          "readOnly": true
        },
        "block_height": {
          "type": "string",
          "format": "uint64",
          "description": "For the local node, the height of the last committed block",
          "readOnly": true
        },
        "connection_status": {
          "$ref": "#/definitions/v1ConnectionStatus",
          "description": "An indication of the nodes connection status.",
          "title": "Status of the connection to this blockchain node",
          "readOnly": true
        },
        "timestamp_committed": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when consensus was achieved for the block at `block_height` (RFC 3339) obtained from the block info of the 'latest' block.",
          "title": "The timestamp when the ledger committed the block at block_height",
          "readOnly": true
        },
        "timestamp_created": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of creation of the genesis block (RFC 3339)",
          "title": "The timestamp when the ledger was created i.e. the timestamp of the genesis block",
          "readOnly": true
        },
        "syncStatus": {
          "$ref": "#/definitions/v1SyncStatus",
          "description": "IF present, the node is syncing.",
          "readOnly": true
        },
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PeerBlockchainNode",
            "readOnly": true
          },
          "description": "List of peer blockchain nodes. "
        },
        "genesis_hash": {
          "type": "string",
          "description": "HASH of genesis block.",
          "readOnly": true
        },
        "state_root": {
          "type": "string",
          "description": "state root of genesis block.",
          "readOnly": true
        }
      }
    },
    "v1ConnectionStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REACHABLE",
        "UNREACHABLE"
      ],
      "default": "UNSPECIFIED"
    },
    "v1GetBlockResponse": {
      "type": "object",
      "example": {
        "number": "0x1a95f",
        "hash": "0x5c6726d7570046c6c4b20e97de1486877f293ba1e4d3b64c13b671354c2f8266",
        "parentHash": "0x5fb3e35418f67379dbb2093d4886409ff8e530116628aee7c960e18f2fa9f40c",
        "nonce": "307830303030303030303030303030303030",
        "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
        "logsBloom": "3078303030303030303030303030303030303030303030303030303030303030303...",
        "transactionRoot": "0x5d912ec4fd96825fc58e75401d9834e94bf2fd8f01e50d6946831a60ec1c2040",
        "stateRoot": "0xb1bf30baaed044489b769f4bc557594f74e917b297b79ebe88102a856490cfc4",
        "receiptsRoot": "0x8bde93a8260d39fa79b76b8c5c7fe687669ba17c63928c4d8e55bc8fcfad04ee",
        "miner": "0x0000000000000000000000000000000000000000",
        "difficulty": "0x20000",
        "extraData": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4RDW4QfD3cYx...",
        "gasLimit": "0xb2d05e00",
        "gasUsed": "0xf426",
        "timestamp": "0xf426"
      },
      "properties": {
        "number": {
          "type": "string",
          "description": "the block number in hexidecimal",
          "readOnly": true
        },
        "hash": {
          "type": "string",
          "description": "the block hash",
          "readOnly": true
        },
        "parentHash": {
          "type": "string",
          "description": "hash of the parent block",
          "readOnly": true
        },
        "nonce": {
          "type": "string",
          "description": "hash of the generated proof of work",
          "readOnly": true
        },
        "sha3Uncles": {
          "type": "string",
          "description": "sha3 hash of the uncles data in the block",
          "readOnly": true
        },
        "logsBloom": {
          "type": "string",
          "description": "the bloom filter for the logs of the block",
          "readOnly": true
        },
        "transactionRoot": {
          "type": "string",
          "description": "the root of the transaction trie of the block",
          "readOnly": true
        },
        "stateRoot": {
          "type": "string",
          "description": "the root of the final state trie of the block",
          "readOnly": true
        },
        "receiptsRoot": {
          "type": "string",
          "description": "the root of the receipts trie of the block",
          "readOnly": true
        },
        "miner": {
          "type": "string",
          "description": "the address of the beneficiary to whom the mining rewards were given",
          "readOnly": true
        },
        "difficulty": {
          "type": "string",
          "description": "integer of the difficulty for this block encoded as a hexadecimal",
          "readOnly": true
        },
        "extraData": {
          "type": "string",
          "format": "byte",
          "description": "the “extra data” field of this block",
          "readOnly": true
        },
        "gasLimit": {
          "type": "string",
          "description": "the maximum gas allowed in this block encoded as a hexadecimal",
          "readOnly": true
        },
        "gasUsed": {
          "type": "string",
          "description": "the total used gas by all transactions in this block encoded as a hexadecimal",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "description": "the unix timestamp for when the block was collated",
          "readOnly": true
        },
        "privateStateRoot": {
          "type": "string",
          "description": "the root of the final, node specific, *private* state trie of the block",
          "readOnly": true
        }
      },
      "description": "Response block of eth_getBlockByHash or eth_getBlockByNumber,Note: the transactions or uncles which are required to recover the block hash, are not provided"
    },
    "v1JSONWebKey": {
      "type": "object",
      "properties": {
        "keyEC": {
          "$ref": "#/definitions/v1JSONWebKeyEC"
        }
      }
    },
    "v1JSONWebKeyEC": {
      "type": "object",
      "example": {
        "kty": "EC",
        "crv": "P-256K",
        "x": "VBKHictTWJC-3sqknXCb8MI4IxTc3c_My7lnem2C74E=",
        "y": "ItNeb5d-6vEHkvtUOcDYrEADxsZXeOCJm18pQWntenE=",
        "d": ""
      },
      "properties": {
        "kty": {
          "$ref": "#/definitions/v1JSONWebKeyType",
          "description": "The type of the key. MUST be 'EC'",
          "title": "Must be \"EC\""
        },
        "crv": {
          "type": "string",
          "description": "The curve name for the key.  6.2.1.1 rfc 7518, 3.1 draft-ietf-cose-webauthn-algorithms-00 MUST be one of P-256K, P-256, P-384, P-521",
          "title": "CurveName crv = 2 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {",
          "maxLength": 64
        },
        "x": {
          "type": "string",
          "description": "The base64url encoding of the x component for the uncompressed point. 6.2.1.2 rfc 7518",
          "maxLength": 256
        },
        "y": {
          "type": "string",
          "description": "The base64url encoding of the y component the uncompressed point 6.2.1.3 rfc 7518",
          "maxLength": 256
        },
        "d": {
          "type": "string",
          "description": "Present only for PRIVATE keys. The base64url encoding of the private  key 6.2.2.1 rfc 7518",
          "maxLength": 2048
        }
      },
      "description": "A public or private Elliptic Curve Key according to RFC 7518. As an extension, we permit the crv value P-256K1 to indicate  the SEC2 P-256K1 aka Secp256k1 curve is used.  See draft-ietf-cose-webauthn-algorithms-00, and  http://www.secg.org/sec2-v2.pdf"
    },
    "v1JSONWebKeyType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "EC",
        "RSA",
        "OCT"
      ],
      "default": "UNSPECIFIED",
      "title": "JSONWebKey.Type The key types declared in 6.1 rfc-7518"
    },
    "v1PeerBlockchainNode": {
      "type": "object",
      "properties": {
        "validator_pubkey": {
          "$ref": "#/definitions/v1JSONWebKey",
          "description": "The Blockchain node Public key, used to validate transactions.  A Secp256k1 public key. Formatted as  a JWK accodring to RFC 7517 (JWK), RFC 7518 (JWA) and  draft-ietf-cose-webauthn-algorithms-00. Note in particular,  that x, y are the base64url encoding of the uncompressed key.",
          "readOnly": true
        },
        "connection_status": {
          "$ref": "#/definitions/v1ConnectionStatus",
          "description": "An indication of the peers connection status.",
          "readOnly": true
        }
      }
    },
    "v1SyncStatus": {
      "type": "object",
      "properties": {
        "starting_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the starting block.",
          "readOnly": true
        },
        "current_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the current block.",
          "readOnly": true
        },
        "highest_block": {
          "type": "string",
          "format": "uint64",
          "description": "When syncing, the highest block.",
          "readOnly": true
        }
      }
    }
  }
}
